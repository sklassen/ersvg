-module(ersvg_tests). 
-import(ersvg,[version/0,svg_to_png/1]).

-include_lib("eunit/include/eunit.hrl").
-include_lib("xmerl/include/xmerl.hrl").

-define(PNG,<<137,80,78,71,13,10,26,10,0,0,0,13,73,72,68,82,0,0,0,100,0,0,
          0,100,8,6,0,0,0,112,226,149,84,0,0,3,68,73,68,65,84,120,1,
          237,224,1,144,36,73,146,36,73,18,139,170,153,187,71,68,68,
          102,102,102,86,85,85,85,85,119,119,119,119,119,247,204,204,
          204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
          204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
          204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
          204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
          204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
          204,204,204,204,204,204,204,204,116,119,119,119,119,87,87,
          85,85,85,85,102,102,70,70,68,132,187,155,153,10,207,76,102,
          87,119,117,119,119,79,207,204,204,204,204,76,162,184,234,
          127,18,196,85,255,147,32,174,250,159,4,113,213,255,36,136,
          171,254,39,65,92,245,63,9,226,170,255,73,16,87,253,79,130,
          184,234,127,18,196,85,255,147,32,174,250,159,4,113,213,255,
          36,136,171,254,39,65,92,245,63,9,226,170,255,73,16,87,253,
          79,130,184,234,127,18,196,85,255,147,32,174,250,159,4,113,
          213,255,36,136,23,157,185,234,223,67,252,203,16,47,58,115,
          213,191,135,248,151,33,94,116,230,170,127,15,241,47,67,188,
          232,204,85,255,30,226,95,134,120,209,153,171,254,61,196,191,
          12,241,162,51,87,253,123,136,127,25,226,69,103,174,250,247,
          16,255,50,196,139,206,92,245,239,33,254,101,136,23,157,185,
          234,223,67,252,203,16,47,58,115,213,191,135,248,151,33,94,
          116,230,170,127,15,241,47,67,188,232,204,85,255,30,226,95,
          134,120,209,153,171,254,61,196,191,12,241,162,51,87,253,123,
          136,127,25,226,69,103,174,250,247,16,255,50,196,139,206,92,
          245,239,33,254,101,136,23,157,185,234,223,67,252,203,16,47,
          58,115,213,191,135,248,151,33,94,116,230,170,127,15,241,47,
          67,188,232,204,85,255,30,226,95,134,120,209,153,171,254,61,
          196,191,12,241,162,51,87,253,123,136,127,25,226,69,103,174,
          250,247,16,255,50,196,139,206,92,245,239,33,254,101,136,23,
          157,185,234,223,67,252,203,16,47,58,115,213,191,135,248,151,
          33,94,116,230,170,127,15,241,47,67,188,232,204,85,255,30,
          226,95,134,120,209,153,171,254,61,196,191,12,241,162,51,87,
          253,123,136,127,25,226,69,103,174,250,247,16,255,50,196,139,
          206,92,245,239,33,254,101,136,23,157,185,234,223,67,252,203,
          16,47,58,115,213,191,135,248,151,33,94,116,230,170,127,15,
          241,47,67,188,232,204,85,255,30,226,95,134,120,209,153,171,
          254,61,196,191,12,241,162,51,87,253,123,136,127,25,226,69,
          103,174,250,247,16,255,50,196,139,206,92,245,239,33,254,101,
          136,23,157,185,234,223,67,252,203,16,47,58,115,213,191,135,
          248,151,33,94,116,230,170,127,15,241,47,67,188,232,204,85,
          255,30,226,95,134,120,209,153,171,254,61,196,191,12,241,162,
          51,87,253,123,136,127,25,226,69,103,174,250,247,16,255,50,
          196,139,206,92,245,239,33,254,101,136,23,157,185,234,223,67,
          252,203,16,47,58,115,213,191,135,248,151,33,174,250,159,4,
          113,213,255,36,136,171,254,39,65,92,245,63,9,226,170,255,73,
          16,87,253,79,130,184,234,127,18,196,85,255,147,32,174,250,
          159,4,113,213,255,36,136,171,254,39,65,92,245,63,9,226,170,
          255,73,16,87,253,79,130,184,234,127,18,196,85,255,147,32,
          174,250,159,4,113,213,255,36,136,171,254,39,65,92,245,63,9,
          226,170,255,73,16,87,253,79,130,184,234,127,18,196,85,255,
          147,32,174,250,159,4,113,213,255,36,136,171,254,39,65,92,
          245,63,9,226,170,255,73,16,87,253,79,194,63,2,115,140,50,
          101,9,37,127,19,0,0,0,0,73,69,78,68,174,66,96,130>>).

svg_to_png_bad_test() ->
  ?assertError(illegal,svg_to_png(<<"\" | date > /tmp/bad\0">>)).

svg_to_png_string_test() ->
  SVG = <<"<svg width='100' height='100' xmlns=\"http://www.w3.org/2000/svg\">\r\n<rect x=\"10\" y='20' width='80' height='50' fill='black'/></svg>">>,
  ?assertEqual(?PNG,svg_to_png(SVG)).

svg_to_png_xmerl_test() ->
    Rect=#xmlElement{name='rect',attributes=[{x,10},{y,20},{width,80},{height,50},{fill,black}]},
    RootEl=#xmlElement{name='svg',attributes=[{width,100},{height,100},{xmlns,'http://www.w3.org/2000/svg'}],content=[Rect]},
    Export=list_to_binary(xmerl:export_simple([RootEl],xmerl_xml,[{prolog,""}])),
    ?assertEqual(?PNG,svg_to_png(Export)).
